# Samples: 1lep
# reweight_method: ref

treename:
    Events

selection:
    ### use `&`, `|`, `~` for logical operations on numpy arrays
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    ## QUESTION: INCLUDE PRONGS/GENMASS REQ FOR WJETS/TTBAR??
    >
    np.squeeze((fj_pt>200) &
    (fj_pt<2500) &
    (np.absolute(fj_eta)<2.4) &
    (fj_msoftdrop>=20) &
    (fj_msoftdrop<260) &
    (   ( (fj_Top_2q==1) |
          (fj_Top_elenu==1) |
          (fj_Top_munu==1) |
          (fj_Top_taunu==1) ) |
        ( (fj_V_2q==1) |
          (fj_V_elenu==1) |
          (fj_V_munu==1) |
          (fj_V_taunu==1) ) |
        ( ( (fj_isQCDb==1) |
          (fj_isQCDbb==1) |
          (fj_isQCDc==1) |
          (fj_isQCDcc==1) |
          (fj_isQCDothers == 1) ) &
        (fj_genRes_mass<=0) ) |
      ( ((fj_H_VV_elenuqq==1) | (fj_H_VV_munuqq==1) | (fj_H_VV_leptauelvqq==1) | (fj_H_VV_leptaumuvqq==1) | (fj_H_VV_hadtauvqq==1)) &
        (fj_nprongs>1) &
        (fj_lepinprongs==1) &
        (fj_genRes_mass>0) ) ))

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    target_mass: np.maximum(1, np.where(fj_genRes_mass>0, fj_genRes_mass, fj_msoftdrop))
    #
    ## background (wjets, ttbar, qcd)
    fj_QCD_label: ((fj_isQCDb==1) | (fj_isQCDbb==1) | (fj_isQCDc==1) | (fj_isQCDcc==1) | (fj_isQCDothers==1))
    fj_ttbar_bmerged: (fj_Top_bmerged==1) & ((fj_Top_2q==1) | (fj_Top_elenu==1) | (fj_Top_munu==1) | (fj_Top_taunu==1))
    fj_ttbar_bsplit: (fj_Top_bmerged!=1) & ((fj_Top_2q==1) | (fj_Top_elenu==1) | (fj_Top_munu==1) | (fj_Top_taunu==1))
    fj_ttbar_lepmerged: (fj_lepinprongs==1) & ((fj_Top_2q==1) | (fj_Top_elenu==1) | (fj_Top_munu==1) | (fj_Top_taunu==1))
    fj_ttbar_lepsplit: (fj_lepinprongs!=1) & ((fj_Top_2q==1) | (fj_Top_elenu==1) | (fj_Top_munu==1) | (fj_Top_taunu==1))
    fj_ttbar_label: ((fj_Top_2q==1) | (fj_Top_elenu==1) | (fj_Top_munu==1) | (fj_Top_taunu==1))
    fj_wjets_lepmerged: (fj_lepinprongs==1) & ((fj_V_2q==1) | (fj_V_elenu==1) | (fj_V_munu==1) | (fj_V_taunu==1))
    fj_wjets_lepsplit: (fj_lepinprongs!=1) & ((fj_V_2q==1) | (fj_V_elenu==1) | (fj_V_munu==1) | (fj_V_taunu==1))
    fj_wjets_label: ((fj_V_2q==1) | (fj_V_elenu==1) | (fj_V_munu==1) | (fj_V_taunu==1))
    fj_bkgd_label: (((fj_V_2q==1) | (fj_V_elenu==1) | (fj_V_munu==1) | (fj_V_taunu==1)) |((fj_Top_2q==1) | (fj_Top_elenu==1) | (fj_Top_munu==1) | (fj_Top_taunu==1))  |((fj_isQCDb==1) | (fj_isQCDbb==1) | (fj_isQCDc==1) | (fj_isQCDcc==1) | (fj_isQCDothers==1)) )
    fj_lep_wjets_label: ((fj_V_elenu==1) | (fj_V_munu==1) | (fj_V_taunu==1))
    fj_had_wjets_label: ((fj_V_2q==1))
    #
    # signal (HVV)
    fj_isHVV_elenuqq: (fj_H_VV_elenuqq==1)
    fj_isHVV_munuqq: (fj_H_VV_munuqq==1)
    fj_isHVV_leptauelvqq: (fj_H_VV_leptauelvqq==1)
    fj_isHVV_leptaumuvqq: (fj_H_VV_leptaumuvqq==1)
    fj_isHVV_hadtau: (fj_H_VV_hadtauvqq==1)
    fj_isHVV_leptau: ((fj_H_VV_leptauelvqq==1) | (fj_H_VV_leptaumuvqq==1))
    fj_isHVV_istau: ((fj_H_VV_leptauelvqq==1) | (fj_H_VV_leptaumuvqq==1) | (fj_H_VV_hadtauvqq==1))
    fj_sig_label: ((fj_H_VV_elenuqq==1) | (fj_H_VV_munuqq==1) | ((fj_H_VV_leptauelvqq==1) | (fj_H_VV_leptaumuvqq==1) | (fj_H_VV_hadtauvqq==1))
    label_H_WqqWqq_0c: ( (fj_H_VV_4q==1) & (fj_nprongs==4) & (fj_ncquarks==0) )
    label_H_WqqWqq_1c: ( (fj_H_VV_4q==1) & (fj_nprongs==4) & (fj_ncquarks==1) )
    label_H_WqqWqq_2c: ( (fj_H_VV_4q==1) & (fj_nprongs==4) & (fj_ncquarks==2) )
    label_H_WqqWq_0c: ( (fj_H_VV_4q==1) & (fj_nprongs==3) & (fj_ncquarks==0) )
    label_H_WqqWq_1c: ( (fj_H_VV_4q==1) & (fj_nprongs==3) & (fj_ncquarks==1) )
    label_H_WqqWq_2c: ( (fj_H_VV_4q==1) & (fj_nprongs==3) & (fj_ncquarks==2) )
    label_H_WqqWev_0c: ( (fj_H_VV_elenuqq==1) & (fj_nprongs==2) & (fj_ncquarks==0) )
    label_H_WqqWev_1c: ( (fj_H_VV_elenuqq==1) & (fj_nprongs==2) & (fj_ncquarks==1) )
    label_H_WqqWmv_0c: ( (fj_H_VV_munuqq==1) & (fj_nprongs==2) & (fj_ncquarks==0) )
    label_H_WqqWmv_1c: ( (fj_H_VV_munuqq==1) & (fj_nprongs==2) & (fj_ncquarks==1) )
    label_H_WqqWtauev_0c: ( (fj_H_VV_leptauelvqq==1) & (fj_nprongs==2) & (fj_ncquarks==0) )
    label_H_WqqWtauev_1c: ( (fj_H_VV_leptauelvqq==1) & (fj_nprongs==2) & (fj_ncquarks==1) )
    label_H_WqqWtaumv_0c: ( (fj_H_VV_leptaumuvqq==1) & (fj_nprongs==2) & (fj_ncquarks==0) )
    label_H_WqqWtaumv_1c: ( (fj_H_VV_leptaumuvqq==1) & (fj_nprongs==2) & (fj_ncquarks==1) )
    label_H_WqqWtauhv_0c: label_H_WqqWtauhv_0c: ( (fj_H_VV_hadtauvqq==1) & (fj_nprongs==2) & (fj_ncquarks==0) )
    label_H_WqqWtauhv_1c: label_H_WqqWtauhv_1c: ( (fj_H_VV_hadtauvqq==1) & (fj_nprongs==2) & (fj_ncquarks==1) )
    label_H_WqqWqq: ( (fj_H_VV_4q==1) & (fj_nprongs==4) )
    label_H_WqqWq: ( (fj_H_VV_4q==1) & (fj_nprongs==3) )
    label_H_WqqWev: ( (fj_H_VV_elenuqq==1) & (fj_nprongs==2) )
    label_H_WqqWmv: ( (fj_H_VV_munuqq==1) & (fj_nprongs==2) )
    label_H_WqqWtauev: ( (fj_H_VV_leptauelvqq==1) & (fj_nprongs==2) )
    label_H_WqqWtaumv: ( (fj_H_VV_leptaumuvqq==1) & (fj_nprongs==2) )
    label_H_WqqWtauhv: label_H_WqqWtauhv_0c: ( (fj_H_VV_hadtauvqq==1) & (fj_nprongs==2) )
    label_QCD_bb: (fj_isQCDbb==1)
    label_QCD_cc: (fj_isQCDcc==1)
    label_QCD_b: (fj_isQCDb==1)
    label_QCD_c: (fj_isQCDc==1)
    label_QCD_others: (fj_isQCDothers==1)
    label_Top_bWqq_0c: ( (fj_Top_2q==1) & (fj_nprongs == 2)  & (fj_Top_bmerged==1) & (fj_ncquarks==0) ) 
    label_Top_bWqq_1c: ( (fj_Top_2q==1) & (fj_nprongs == 2) & (fj_Top_bmerged==1) & (fj_ncquarks==1) )
    label_Top_bWq_0c: ( (fj_Top_2q==1) & (fj_nprongs == 1) & (fj_Top_bmerged==1) & (fj_ncquarks==0) )
    label_Top_bWq_1c: ( (fj_Top_2q==1) & fj_nprongs == 1) & (fj_Top_bmerged==1) & (fj_ncquarks==1) )
    label_Top_bWqq: ( (fj_Top_2q==1) & (fj_nprongs == 2)  & (fj_Top_bmerged==1) )
    label_Top_bWq: ( (fj_Top_2q==1) & (fj_nprongs == 1) & (fj_Top_bmerged==1) )
    label_Top_bWev: ( (fj_Top_elenu==1) & (fj_Top_bmerged==1) )
    label_Top_bWmv: ( (fj_Top_munu==1) & (fj_Top_bmerged==1) )
    label_Top_bWtauhv: ( (fj_Top_hadtauvqq==1) & (fj_Top_bmerged==1) )
    label_Top_bWtauev: ( (fj_Top_leptauelvnu==1) & (fj_Top_bmerged==1) )
    label_Top_bWtaumv: ( (fj_Top_leptaumuvnu==1) & (fj_Top_bmerged==1) )
    label_Wqq_jets_1c: (fj_V_2q==1) 
    label_Wqq_jets_0c: (fj_V_2q==1)

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    ### [note]: `[var]_mask` will not be transformed even if `method=auto`
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:
    pf_points:
        length: 100
        vars:
        - pfcand_etarel
        - pfcand_phirel
    pf_features:
        length: 100
        vars:
        ### [format 1]: var_name (no transformation)
        ### [format 2]: [var_name,
        ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
        ###              multiply_by(optional, default=1),
        ###              clip_min(optional, default=-5),
        ###              clip_max(optional, default=5),
        ###              pad_value(optional, default=0)]
        - [pfcand_pt_log_nopuppi, 1, 0.5]
        - [pfcand_e_log_nopuppi, 1.3, 0.5]
        - pfcand_etarel
        - pfcand_phirel
        - pfcand_isEl
        - pfcand_isMu
        - pfcand_isGamma
        - pfcand_isChargedHad
        - pfcand_isNeutralHad
        - [pfcand_abseta, 0.6, 1.6]
        - pfcand_charge
        - [pfcand_VTX_ass, 4, 0.3]
        - pfcand_lostInnerHits
        - [pfcand_normchi2, 5, 0.2]
        - [pfcand_quality, 0, 0.2]
        - [pfcand_dz, 0, 180]
        - [pfcand_dzsig, 0, 0.9]
        - [pfcand_dxy, 0.0, 300]
        - [pfcand_dxysig, 0, 1.0]
    pf_mask:
        length: 100
        vars:
        - pfcand_mask
    sv_points:
        length: 7
        vars:
        - sv_etarel
        - sv_phirel
    sv_features:
        length: 7
        vars:
        - [sv_pt_log, 4, 0.6]
        - [sv_mass, 1.2, 0.3]
        - sv_etarel
        - sv_phirel
        - [sv_abseta, 0.5, 1.6]
        - [sv_ntracks, 3, 1]
        - [sv_normchi2, 1.5, 0.6]
        - [sv_dxy, 0.4, 0.25]
        - [sv_dxysig, 7, 0.02]
        - [sv_d3d, 0.5, 0.2]
        - [sv_d3dsig, 7, 0.02]
    sv_mask:
        length: 7
        vars:
        - sv_mask

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    # 
    # fj_isHVV_elenuqq_merged, fj_isHVV_elenuqq_semimerged, fj_isHVV_munuqq_merged, fj_isHVV_munuqq_semimerged, fj_isHVV_taunuqq_merged, fj_isHVV_taunuqq_semimerged,

    type: simple
    value: [
        fj_ttbar_label, fj_wjets_label,
        fj_isHVV_elenuqq, fj_isHVV_munuqq, fj_H_VV_leptauelvqq, fj_H_VV_leptaumuvqq, fj_H_VV_hadtauvqq
    ]

observers:
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_mass
   - fj_subjet1_pt
   - fj_subjet1_eta
   - fj_subjet1_phi
   - fj_subjet1_mass
   - fj_subjet2_pt
   - fj_subjet2_eta
   - fj_subjet2_phi
   - fj_subjet2_mass
   - fj_msoftdrop
   - fj_dR_V
   - fj_dR_Vstar
   - fj_PN_H4qvsQCD
   - fj_genRes_mass
   - fj_genVstar_mass
   - fj_genV_pt
   - fj_genVstar_pt
   - fj_nprongs
   - fj_H_VV_elenuqq
   - fj_H_VV_munuqq
   - fj_isHVV_hadtau
   - fj_isHVV_leptau
   - fj_isHVV_istau
   - target_mass
   - fj_wjets_label
   - fj_ttbar_label
   - lep_iso
   - lep_miniiso
   - lep_pt_ratio
   - lep_pt
   - lep_dR_fj
   - met_relpt
   - fj_QCD_label
   - fj_sig_label
   - fj_bkgd_label
   - fj_ttbar_lepmerged
   - fj_ttbar_lepsplit
   - fj_wjets_lepsplit
   - fj_wjets_lepmerged
   - fj_V_2q
   - fj_lep_wjets_label
   - fj_had_wjets_label
   - label_H_WqqWqq_0c
   - label_H_WqqWqq_1c
   - label_H_WqqWqq_2c
   - label_H_WqqWq_0c
   - label_H_WqqWq_1c
   - label_H_WqqWq_2c
   - label_H_WqqWev_0c
   - label_H_WqqWev_1c
   - label_H_WqqWmv_0c
   - label_H_WqqWmv_1c
   - label_H_WqqWtauev_0c
   - label_H_WqqWtauev_1c
   - label_H_WqqWtaumv_0c
   - label_H_WqqWtaumv_1c
   - label_H_WqqWtauhv_0c
   - label_H_WqqWtauhv_1c
   - label_QCD_bb
   - label_QCD_cc
   - label_QCD_b
   - label_QCD_c
   - label_QCD_others
   - label_Top_bWqq_0c
   - label_Top_bWqq_1c
   - label_Top_bWq_0c
   - label_Top_bWq_1c
   - label_Top_bWev
   - label_Top_bWmv
   - label_Top_bWtauhv
   - label_Top_bWtauev
   - label_Top_bWtaumv
   - label_Wqq_jets_1c
   - label_Wqq_jets_0c

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
     # log bins as: np.round(np.exp(np.linspace(np.log(MIN), np.log(MAX), NUM_BINS))).astype('int').tolist()
      fj_pt: [200, 251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500]
      target_mass: [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260]
   reweight_classes:
       [
        fj_bkgd_label,
        fj_sig_label
       ]
   class_weights:
       [
        1.0,
        1.0
       ]
   reweight_hists:
